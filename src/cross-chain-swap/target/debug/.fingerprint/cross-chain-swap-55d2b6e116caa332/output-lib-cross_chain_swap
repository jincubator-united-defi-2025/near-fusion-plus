{"$message_type":"diagnostic","message":"Serializing Result<T, E> has been deprecated. Consider marking your method with #[handle_result] if the second generic represents a panicable error or replacing Result with another two type sum enum otherwise. If you really want to keep the legacy behavior, mark the method with #[handle_result] and make it return Result<Result<T, E>, near_sdk::Abort>.","code":null,"level":"error","spans":[{"file_name":"src/base_escrow.rs","byte_start":2289,"byte_end":2295,"line_start":73,"line_end":73,"column_start":44,"column_end":50,"is_primary":true,"text":[{"text":"    pub fn validate_access_token(&self) -> Result<(), EscrowError> {","highlight_start":44,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: Serializing Result<T, E> has been deprecated. Consider marking your method with #[handle_result] if the second generic represents a panicable error or replacing Result with another two type sum enum otherwise. If you really want to keep the legacy behavior, mark the method with #[handle_result] and make it return Result<Result<T, E>, near_sdk::Abort>.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/base_escrow.rs:73:44\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn validate_access_token(&self) -> Result<(), EscrowError> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Serializing Result<T, E> has been deprecated. Consider marking your method with #[handle_result] if the second generic represents a panicable error or replacing Result with another two type sum enum otherwise. If you really want to keep the legacy behavior, mark the method with #[handle_result] and make it return Result<Result<T, E>, near_sdk::Abort>.","code":null,"level":"error","spans":[{"file_name":"src/base_escrow.rs","byte_start":2598,"byte_end":2604,"line_start":80,"line_end":80,"column_start":68,"column_end":74,"is_primary":true,"text":[{"text":"    pub fn validate_immutables(&self, _immutables: &Immutables) -> Result<(), EscrowError> {","highlight_start":68,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: Serializing Result<T, E> has been deprecated. Consider marking your method with #[handle_result] if the second generic represents a panicable error or replacing Result with another two type sum enum otherwise. If you really want to keep the legacy behavior, mark the method with #[handle_result] and make it return Result<Result<T, E>, near_sdk::Abort>.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/base_escrow.rs:80:68\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn validate_immutables(&self, _immutables: &Immutables) -> Result<(), EscrowError> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Serializing Result<T, E> has been deprecated. Consider marking your method with #[handle_result] if the second generic represents a panicable error or replacing Result with another two type sum enum otherwise. If you really want to keep the legacy behavior, mark the method with #[handle_result] and make it return Result<Result<T, E>, near_sdk::Abort>.","code":null,"level":"error","spans":[{"file_name":"src/base_escrow.rs","byte_start":2838,"byte_end":2844,"line_start":86,"line_end":86,"column_start":82,"column_end":88,"is_primary":true,"text":[{"text":"    pub fn validate_secret(&self, secret: &[u8; 32], immutables: &Immutables) -> Result<(), EscrowError> {","highlight_start":82,"highlight_end":88}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: Serializing Result<T, E> has been deprecated. Consider marking your method with #[handle_result] if the second generic represents a panicable error or replacing Result with another two type sum enum otherwise. If you really want to keep the legacy behavior, mark the method with #[handle_result] and make it return Result<Result<T, E>, near_sdk::Abort>.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/base_escrow.rs:86:82\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn validate_secret(&self, secret: &[u8; 32], immutables: &Immutables) -> Result<(), EscrowError> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Serializing Result<T, E> has been deprecated. Consider marking your method with #[handle_result] if the second generic represents a panicable error or replacing Result with another two type sum enum otherwise. If you really want to keep the legacy behavior, mark the method with #[handle_result] and make it return Result<Result<T, E>, near_sdk::Abort>.","code":null,"level":"error","spans":[{"file_name":"src/escrow_factory.rs","byte_start":6417,"byte_end":6423,"line_start":176,"line_end":176,"column_start":10,"column_end":16,"is_primary":true,"text":[{"text":"    ) -> Result<bool, EscrowError> {","highlight_start":10,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: Serializing Result<T, E> has been deprecated. Consider marking your method with #[handle_result] if the second generic represents a panicable error or replacing Result with another two type sum enum otherwise. If you really want to keep the legacy behavior, mark the method with #[handle_result] and make it return Result<Result<T, E>, near_sdk::Abort>.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/escrow_factory.rs:176:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> Result<bool, EscrowError> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Serializing Result<T, E> has been deprecated. Consider marking your method with #[handle_result] if the second generic represents a panicable error or replacing Result with another two type sum enum otherwise. If you really want to keep the legacy behavior, mark the method with #[handle_result] and make it return Result<Result<T, E>, near_sdk::Abort>.","code":null,"level":"error","spans":[{"file_name":"src/escrow_src.rs","byte_start":6048,"byte_end":6054,"line_start":141,"line_end":141,"column_start":67,"column_end":73,"is_primary":true,"text":[{"text":"    pub fn validate_immutables(&self, immutables: &Immutables) -> Result<(), EscrowError> {","highlight_start":67,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: Serializing Result<T, E> has been deprecated. Consider marking your method with #[handle_result] if the second generic represents a panicable error or replacing Result with another two type sum enum otherwise. If you really want to keep the legacy behavior, mark the method with #[handle_result] and make it return Result<Result<T, E>, near_sdk::Abort>.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/escrow_src.rs:141:67\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m141\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn validate_immutables(&self, immutables: &Immutables) -> Result<(), EscrowError> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Serializing Result<T, E> has been deprecated. Consider marking your method with #[handle_result] if the second generic represents a panicable error or replacing Result with another two type sum enum otherwise. If you really want to keep the legacy behavior, mark the method with #[handle_result] and make it return Result<Result<T, E>, near_sdk::Abort>.","code":null,"level":"error","spans":[{"file_name":"src/escrow_dst.rs","byte_start":4218,"byte_end":4224,"line_start":102,"line_end":102,"column_start":67,"column_end":73,"is_primary":true,"text":[{"text":"    pub fn validate_immutables(&self, immutables: &Immutables) -> Result<(), EscrowError> {","highlight_start":67,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: Serializing Result<T, E> has been deprecated. Consider marking your method with #[handle_result] if the second generic represents a panicable error or replacing Result with another two type sum enum otherwise. If you really want to keep the legacy behavior, mark the method with #[handle_result] and make it return Result<Result<T, E>, near_sdk::Abort>.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/escrow_dst.rs:102:67\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn validate_immutables(&self, immutables: &Immutables) -> Result<(), EscrowError> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"proc-macro derive panicked","code":null,"level":"error","spans":[{"file_name":"src/types.rs","byte_start":194,"byte_end":208,"line_start":8,"line_end":8,"column_start":10,"column_end":24,"is_primary":true,"text":[{"text":"#[derive(BorshSerialize, BorshDeserialize, Serialize, Deserialize, Clone, Debug, PartialEq)]","highlight_start":10,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"message: `proc_macro_crate::crate_name` call error: Could not find `borsh` in `dependencies` or `dev-dependencies` in `/Users/johnwhitton/dev/research/jincubator-united-defi-2025/near-fusion-plus/src/cross-chain-swap/Cargo.toml`!","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: proc-macro derive panicked\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:8:10\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(BorshSerialize, BorshDeserialize, Serialize, Deserialize, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: message: `proc_macro_crate::crate_name` call error: Could not find `borsh` in `dependencies` or `dev-dependencies` in `/Users/johnwhitton/dev/research/jincubator-united-defi-2025/near-fusion-plus/src/cross-chain-swap/Cargo.toml`!\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"proc-macro derive panicked","code":null,"level":"error","spans":[{"file_name":"src/types.rs","byte_start":210,"byte_end":226,"line_start":8,"line_end":8,"column_start":26,"column_end":42,"is_primary":true,"text":[{"text":"#[derive(BorshSerialize, BorshDeserialize, Serialize, Deserialize, Clone, Debug, PartialEq)]","highlight_start":26,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"message: `proc_macro_crate::crate_name` call error: Could not find `borsh` in `dependencies` or `dev-dependencies` in `/Users/johnwhitton/dev/research/jincubator-united-defi-2025/near-fusion-plus/src/cross-chain-swap/Cargo.toml`!","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: proc-macro derive panicked\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:8:26\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(BorshSerialize, BorshDeserialize, Serialize, Deserialize, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: message: `proc_macro_crate::crate_name` call error: Could not find `borsh` in `dependencies` or `dev-dependencies` in `/Users/johnwhitton/dev/research/jincubator-united-defi-2025/near-fusion-plus/src/cross-chain-swap/Cargo.toml`!\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"proc-macro derive panicked","code":null,"level":"error","spans":[{"file_name":"src/types.rs","byte_start":634,"byte_end":648,"line_start":21,"line_end":21,"column_start":10,"column_end":24,"is_primary":true,"text":[{"text":"#[derive(BorshSerialize, BorshDeserialize, Serialize, Deserialize, Clone, Debug, PartialEq)]","highlight_start":10,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"message: `proc_macro_crate::crate_name` call error: Could not find `borsh` in `dependencies` or `dev-dependencies` in `/Users/johnwhitton/dev/research/jincubator-united-defi-2025/near-fusion-plus/src/cross-chain-swap/Cargo.toml`!","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: proc-macro derive panicked\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:21:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(BorshSerialize, BorshDeserialize, Serialize, Deserialize, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: message: `proc_macro_crate::crate_name` call error: Could not find `borsh` in `dependencies` or `dev-dependencies` in `/Users/johnwhitton/dev/research/jincubator-united-defi-2025/near-fusion-plus/src/cross-chain-swap/Cargo.toml`!\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"proc-macro derive panicked","code":null,"level":"error","spans":[{"file_name":"src/types.rs","byte_start":650,"byte_end":666,"line_start":21,"line_end":21,"column_start":26,"column_end":42,"is_primary":true,"text":[{"text":"#[derive(BorshSerialize, BorshDeserialize, Serialize, Deserialize, Clone, Debug, PartialEq)]","highlight_start":26,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"message: `proc_macro_crate::crate_name` call error: Could not find `borsh` in `dependencies` or `dev-dependencies` in `/Users/johnwhitton/dev/research/jincubator-united-defi-2025/near-fusion-plus/src/cross-chain-swap/Cargo.toml`!","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: proc-macro derive panicked\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:21:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(BorshSerialize, BorshDeserialize, Serialize, Deserialize, Clone, Debug, PartialEq)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: message: `proc_macro_crate::crate_name` call error: Could not find `borsh` in `dependencies` or `dev-dependencies` in `/Users/johnwhitton/dev/research/jincubator-united-defi-2025/near-fusion-plus/src/cross-chain-swap/Cargo.toml`!\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"proc-macro derive panicked","code":null,"level":"error","spans":[{"file_name":"src/types.rs","byte_start":2430,"byte_end":2444,"line_start":71,"line_end":71,"column_start":10,"column_end":24,"is_primary":true,"text":[{"text":"#[derive(BorshSerialize, BorshDeserialize, Serialize, Deserialize, Clone, Debug)]","highlight_start":10,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"message: `proc_macro_crate::crate_name` call error: Could not find `borsh` in `dependencies` or `dev-dependencies` in `/Users/johnwhitton/dev/research/jincubator-united-defi-2025/near-fusion-plus/src/cross-chain-swap/Cargo.toml`!","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: proc-macro derive panicked\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:71:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(BorshSerialize, BorshDeserialize, Serialize, Deserialize, Clone, Debug)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: message: `proc_macro_crate::crate_name` call error: Could not find `borsh` in `dependencies` or `dev-dependencies` in `/Users/johnwhitton/dev/research/jincubator-united-defi-2025/near-fusion-plus/src/cross-chain-swap/Cargo.toml`!\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"proc-macro derive panicked","code":null,"level":"error","spans":[{"file_name":"src/types.rs","byte_start":2446,"byte_end":2462,"line_start":71,"line_end":71,"column_start":26,"column_end":42,"is_primary":true,"text":[{"text":"#[derive(BorshSerialize, BorshDeserialize, Serialize, Deserialize, Clone, Debug)]","highlight_start":26,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"message: `proc_macro_crate::crate_name` call error: Could not find `borsh` in `dependencies` or `dev-dependencies` in `/Users/johnwhitton/dev/research/jincubator-united-defi-2025/near-fusion-plus/src/cross-chain-swap/Cargo.toml`!","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: proc-macro derive panicked\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:71:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(BorshSerialize, BorshDeserialize, Serialize, Deserialize, Clone, Debug)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: message: `proc_macro_crate::crate_name` call error: Could not find `borsh` in `dependencies` or `dev-dependencies` in `/Users/johnwhitton/dev/research/jincubator-united-defi-2025/near-fusion-plus/src/cross-chain-swap/Cargo.toml`!\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"proc-macro derive panicked","code":null,"level":"error","spans":[{"file_name":"src/types.rs","byte_start":2730,"byte_end":2744,"line_start":81,"line_end":81,"column_start":10,"column_end":24,"is_primary":true,"text":[{"text":"#[derive(BorshSerialize, BorshDeserialize, Serialize, Deserialize, Clone, Debug)]","highlight_start":10,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"message: `proc_macro_crate::crate_name` call error: Could not find `borsh` in `dependencies` or `dev-dependencies` in `/Users/johnwhitton/dev/research/jincubator-united-defi-2025/near-fusion-plus/src/cross-chain-swap/Cargo.toml`!","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: proc-macro derive panicked\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:81:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(BorshSerialize, BorshDeserialize, Serialize, Deserialize, Clone, Debug)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: message: `proc_macro_crate::crate_name` call error: Could not find `borsh` in `dependencies` or `dev-dependencies` in `/Users/johnwhitton/dev/research/jincubator-united-defi-2025/near-fusion-plus/src/cross-chain-swap/Cargo.toml`!\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"proc-macro derive panicked","code":null,"level":"error","spans":[{"file_name":"src/types.rs","byte_start":2746,"byte_end":2762,"line_start":81,"line_end":81,"column_start":26,"column_end":42,"is_primary":true,"text":[{"text":"#[derive(BorshSerialize, BorshDeserialize, Serialize, Deserialize, Clone, Debug)]","highlight_start":26,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"message: `proc_macro_crate::crate_name` call error: Could not find `borsh` in `dependencies` or `dev-dependencies` in `/Users/johnwhitton/dev/research/jincubator-united-defi-2025/near-fusion-plus/src/cross-chain-swap/Cargo.toml`!","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: proc-macro derive panicked\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:81:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(BorshSerialize, BorshDeserialize, Serialize, Deserialize, Clone, Debug)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: message: `proc_macro_crate::crate_name` call error: Could not find `borsh` in `dependencies` or `dev-dependencies` in `/Users/johnwhitton/dev/research/jincubator-united-defi-2025/near-fusion-plus/src/cross-chain-swap/Cargo.toml`!\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"proc-macro derive panicked","code":null,"level":"error","spans":[{"file_name":"src/types.rs","byte_start":3050,"byte_end":3064,"line_start":91,"line_end":91,"column_start":10,"column_end":24,"is_primary":true,"text":[{"text":"#[derive(BorshSerialize, BorshDeserialize, Serialize, Deserialize, Clone, Debug)]","highlight_start":10,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"message: `proc_macro_crate::crate_name` call error: Could not find `borsh` in `dependencies` or `dev-dependencies` in `/Users/johnwhitton/dev/research/jincubator-united-defi-2025/near-fusion-plus/src/cross-chain-swap/Cargo.toml`!","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: proc-macro derive panicked\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:91:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(BorshSerialize, BorshDeserialize, Serialize, Deserialize, Clone, Debug)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: message: `proc_macro_crate::crate_name` call error: Could not find `borsh` in `dependencies` or `dev-dependencies` in `/Users/johnwhitton/dev/research/jincubator-united-defi-2025/near-fusion-plus/src/cross-chain-swap/Cargo.toml`!\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"proc-macro derive panicked","code":null,"level":"error","spans":[{"file_name":"src/types.rs","byte_start":3066,"byte_end":3082,"line_start":91,"line_end":91,"column_start":26,"column_end":42,"is_primary":true,"text":[{"text":"#[derive(BorshSerialize, BorshDeserialize, Serialize, Deserialize, Clone, Debug)]","highlight_start":26,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"message: `proc_macro_crate::crate_name` call error: Could not find `borsh` in `dependencies` or `dev-dependencies` in `/Users/johnwhitton/dev/research/jincubator-united-defi-2025/near-fusion-plus/src/cross-chain-swap/Cargo.toml`!","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: proc-macro derive panicked\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:91:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(BorshSerialize, BorshDeserialize, Serialize, Deserialize, Clone, Debug)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: message: `proc_macro_crate::crate_name` call error: Could not find `borsh` in `dependencies` or `dev-dependencies` in `/Users/johnwhitton/dev/research/jincubator-united-defi-2025/near-fusion-plus/src/cross-chain-swap/Cargo.toml`!\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `near_sdk::Balance`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/base_escrow.rs","byte_start":114,"byte_end":121,"line_start":3,"line_end":3,"column_start":46,"column_end":53,"is_primary":true,"text":[{"text":"    env, ext_contract, log, near, AccountId, Balance, Gas, Promise, PromiseResult,","highlight_start":46,"highlight_end":53}],"label":"no `Balance` in the root","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `near_sdk::Balance`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/base_escrow.rs:3:46\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    env, ext_contract, log, near, AccountId, Balance, Gas, Promise, PromiseResult,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `Balance` in the root\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved imports `near_sdk::Balance`, `near_sdk::collections`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/escrow_factory.rs","byte_start":100,"byte_end":107,"line_start":3,"line_end":3,"column_start":32,"column_end":39,"is_primary":true,"text":[{"text":"    env, log, near, AccountId, Balance, Gas, Promise,","highlight_start":32,"highlight_end":39}],"label":"no `Balance` in the root","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/escrow_factory.rs","byte_start":164,"byte_end":175,"line_start":5,"line_end":5,"column_start":5,"column_end":16,"is_primary":true,"text":[{"text":"    collections::UnorderedMap,","highlight_start":5,"highlight_end":16}],"label":"could not find `collections` in `near_sdk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"unresolved item `crate::base_escrow::ext_ft::Balance` exists but is inaccessible","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"found an item that was configured out","code":null,"level":"note","spans":[{"file_name":"/Users/johnwhitton/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/near-sdk-5.15.1/src/lib.rs","byte_start":39137,"byte_end":39148,"line_start":1065,"line_end":1065,"column_start":9,"column_end":20,"is_primary":true,"text":[{"text":"pub mod collections;","highlight_start":9,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the item is gated behind the `legacy` feature","code":null,"level":"note","spans":[{"file_name":"/Users/johnwhitton/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/near-sdk-5.15.1/src/lib.rs","byte_start":39108,"byte_end":39126,"line_start":1064,"line_end":1064,"column_start":7,"column_end":25,"is_primary":true,"text":[{"text":"#[cfg(feature = \"legacy\")]","highlight_start":7,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved imports `near_sdk::Balance`, `near_sdk::collections`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/escrow_factory.rs:3:32\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    env, log, near, AccountId, Balance, Gas, Promise,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `Balance` in the root\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    serde::{Deserialize, Serialize},\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    collections::UnorderedMap,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `collections` in `near_sdk`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: unresolved item `crate::base_escrow::ext_ft::Balance` exists but is inaccessible\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: found an item that was configured out\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/johnwhitton/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/near-sdk-5.15.1/src/lib.rs:1065:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1065\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub mod collections;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the item is gated behind the `legacy` feature\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/johnwhitton/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/near-sdk-5.15.1/src/lib.rs:1064:7\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1064\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(feature = \"legacy\")]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `near_sdk::Balance`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/escrow_src.rs","byte_start":100,"byte_end":107,"line_start":3,"line_end":3,"column_start":32,"column_end":39,"is_primary":true,"text":[{"text":"    env, log, near, AccountId, Balance,","highlight_start":32,"highlight_end":39}],"label":"no `Balance` in the root","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"unresolved item `crate::base_escrow::ext_ft::Balance` exists but is inaccessible","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `near_sdk::Balance`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/escrow_src.rs:3:32\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    env, log, near, AccountId, Balance,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `Balance` in the root\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: unresolved item `crate::base_escrow::ext_ft::Balance` exists but is inaccessible\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `near_sdk::Balance`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/escrow_dst.rs","byte_start":100,"byte_end":107,"line_start":3,"line_end":3,"column_start":32,"column_end":39,"is_primary":true,"text":[{"text":"    env, log, near, AccountId, Balance,","highlight_start":32,"highlight_end":39}],"label":"no `Balance` in the root","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"unresolved item `crate::base_escrow::ext_ft::Balance` exists but is inaccessible","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `near_sdk::Balance`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/escrow_dst.rs:3:32\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    env, log, near, AccountId, Balance,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `Balance` in the root\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: unresolved item `crate::base_escrow::ext_ft::Balance` exists but is inaccessible\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `near_sdk::Balance`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/types.rs","byte_start":121,"byte_end":128,"line_start":4,"line_end":4,"column_start":16,"column_end":23,"is_primary":true,"text":[{"text":"    AccountId, Balance, Timestamp,","highlight_start":16,"highlight_end":23}],"label":"no `Balance` in the root","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"unresolved item `crate::base_escrow::ext_ft::Balance` exists but is inaccessible","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `near_sdk::Balance`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:4:16\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    AccountId, Balance, Timestamp,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `Balance` in the root\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: unresolved item `crate::base_escrow::ext_ft::Balance` exists but is inaccessible\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `near_sdk::hash`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/utils.rs","byte_start":29,"byte_end":33,"line_start":3,"line_end":3,"column_start":5,"column_end":9,"is_primary":true,"text":[{"text":"    hash::{hash, CryptoHash},","highlight_start":5,"highlight_end":9}],"label":"could not find `hash` in `near_sdk`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `near_sdk::hash`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/utils.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    hash::{hash, CryptoHash},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `hash` in `near_sdk`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `Deserialize`, `PromiseResult`, `Promise`, `Serialize`, `env`, `log`, and `self`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/base_escrow.rs","byte_start":28,"byte_end":32,"line_start":2,"line_end":2,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"    borsh::{self, BorshDeserialize, BorshSerialize},","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/base_escrow.rs","byte_start":73,"byte_end":76,"line_start":3,"line_end":3,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    env, ext_contract, log, near, AccountId, Balance, Gas, Promise, PromiseResult,","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/base_escrow.rs","byte_start":92,"byte_end":95,"line_start":3,"line_end":3,"column_start":24,"column_end":27,"is_primary":true,"text":[{"text":"    env, ext_contract, log, near, AccountId, Balance, Gas, Promise, PromiseResult,","highlight_start":24,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/base_escrow.rs","byte_start":128,"byte_end":135,"line_start":3,"line_end":3,"column_start":60,"column_end":67,"is_primary":true,"text":[{"text":"    env, ext_contract, log, near, AccountId, Balance, Gas, Promise, PromiseResult,","highlight_start":60,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/base_escrow.rs","byte_start":137,"byte_end":150,"line_start":3,"line_end":3,"column_start":69,"column_end":82,"is_primary":true,"text":[{"text":"    env, ext_contract, log, near, AccountId, Balance, Gas, Promise, PromiseResult,","highlight_start":69,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/base_escrow.rs","byte_start":164,"byte_end":175,"line_start":4,"line_end":4,"column_start":13,"column_end":24,"is_primary":true,"text":[{"text":"    serde::{Deserialize, Serialize},","highlight_start":13,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/base_escrow.rs","byte_start":177,"byte_end":186,"line_start":4,"line_end":4,"column_start":26,"column_end":35,"is_primary":true,"text":[{"text":"    serde::{Deserialize, Serialize},","highlight_start":26,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/base_escrow.rs","byte_start":28,"byte_end":34,"line_start":2,"line_end":2,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"    borsh::{self, BorshDeserialize, BorshSerialize},","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/base_escrow.rs","byte_start":67,"byte_end":76,"line_start":2,"line_end":3,"column_start":52,"column_end":8,"is_primary":true,"text":[{"text":"    borsh::{self, BorshDeserialize, BorshSerialize},","highlight_start":52,"highlight_end":53},{"text":"    env, ext_contract, log, near, AccountId, Balance, Gas, Promise, PromiseResult,","highlight_start":1,"highlight_end":8}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/base_escrow.rs","byte_start":90,"byte_end":95,"line_start":3,"line_end":3,"column_start":22,"column_end":27,"is_primary":true,"text":[{"text":"    env, ext_contract, log, near, AccountId, Balance, Gas, Promise, PromiseResult,","highlight_start":22,"highlight_end":27}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/base_escrow.rs","byte_start":126,"byte_end":187,"line_start":3,"line_end":4,"column_start":58,"column_end":36,"is_primary":true,"text":[{"text":"    env, ext_contract, log, near, AccountId, Balance, Gas, Promise, PromiseResult,","highlight_start":58,"highlight_end":83},{"text":"    serde::{Deserialize, Serialize},","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `Deserialize`, `PromiseResult`, `Promise`, `Serialize`, `env`, `log`, and `self`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/base_escrow.rs:2:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    borsh::{self, BorshDeserialize, BorshSerialize},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    env, ext_contract, log, near, AccountId, Balance, Gas, Promise, PromiseResult,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    serde::{Deserialize, Serialize},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `EscrowError`, `Immutables`, and `TimelockStage`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/base_escrow.rs","byte_start":211,"byte_end":221,"line_start":6,"line_end":6,"column_start":20,"column_end":30,"is_primary":true,"text":[{"text":"use crate::types::{Immutables, EscrowError, TimelockStage};","highlight_start":20,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/base_escrow.rs","byte_start":223,"byte_end":234,"line_start":6,"line_end":6,"column_start":32,"column_end":43,"is_primary":true,"text":[{"text":"use crate::types::{Immutables, EscrowError, TimelockStage};","highlight_start":32,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/base_escrow.rs","byte_start":236,"byte_end":249,"line_start":6,"line_end":6,"column_start":45,"column_end":58,"is_primary":true,"text":[{"text":"use crate::types::{Immutables, EscrowError, TimelockStage};","highlight_start":45,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/base_escrow.rs","byte_start":192,"byte_end":252,"line_start":6,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use crate::types::{Immutables, EscrowError, TimelockStage};","highlight_start":1,"highlight_end":60},{"text":"use crate::utils::{hash_secret, validate_after, validate_before, validate_caller};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `EscrowError`, `Immutables`, and `TimelockStage`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/base_escrow.rs:6:20\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::types::{Immutables, EscrowError, TimelockStage};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `hash_secret`, `validate_after`, `validate_before`, and `validate_caller`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/base_escrow.rs","byte_start":271,"byte_end":282,"line_start":7,"line_end":7,"column_start":20,"column_end":31,"is_primary":true,"text":[{"text":"use crate::utils::{hash_secret, validate_after, validate_before, validate_caller};","highlight_start":20,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/base_escrow.rs","byte_start":284,"byte_end":298,"line_start":7,"line_end":7,"column_start":33,"column_end":47,"is_primary":true,"text":[{"text":"use crate::utils::{hash_secret, validate_after, validate_before, validate_caller};","highlight_start":33,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/base_escrow.rs","byte_start":300,"byte_end":315,"line_start":7,"line_end":7,"column_start":49,"column_end":64,"is_primary":true,"text":[{"text":"use crate::utils::{hash_secret, validate_after, validate_before, validate_caller};","highlight_start":49,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/base_escrow.rs","byte_start":317,"byte_end":332,"line_start":7,"line_end":7,"column_start":66,"column_end":81,"is_primary":true,"text":[{"text":"use crate::utils::{hash_secret, validate_after, validate_before, validate_caller};","highlight_start":66,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/base_escrow.rs","byte_start":252,"byte_end":335,"line_start":7,"line_end":8,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use crate::utils::{hash_secret, validate_after, validate_before, validate_caller};","highlight_start":1,"highlight_end":83},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `hash_secret`, `validate_after`, `validate_before`, and `validate_caller`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/base_escrow.rs:7:20\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::utils::{hash_secret, validate_after, validate_before, validate_caller};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `Deserialize`, `Promise`, `Serialize`, `env`, `log`, and `self`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/escrow_factory.rs","byte_start":28,"byte_end":32,"line_start":2,"line_end":2,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"    borsh::{self, BorshDeserialize, BorshSerialize},","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/escrow_factory.rs","byte_start":73,"byte_end":76,"line_start":3,"line_end":3,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    env, log, near, AccountId, Balance, Gas, Promise,","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/escrow_factory.rs","byte_start":78,"byte_end":81,"line_start":3,"line_end":3,"column_start":10,"column_end":13,"is_primary":true,"text":[{"text":"    env, log, near, AccountId, Balance, Gas, Promise,","highlight_start":10,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/escrow_factory.rs","byte_start":114,"byte_end":121,"line_start":3,"line_end":3,"column_start":46,"column_end":53,"is_primary":true,"text":[{"text":"    env, log, near, AccountId, Balance, Gas, Promise,","highlight_start":46,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/escrow_factory.rs","byte_start":135,"byte_end":146,"line_start":4,"line_end":4,"column_start":13,"column_end":24,"is_primary":true,"text":[{"text":"    serde::{Deserialize, Serialize},","highlight_start":13,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/escrow_factory.rs","byte_start":148,"byte_end":157,"line_start":4,"line_end":4,"column_start":26,"column_end":35,"is_primary":true,"text":[{"text":"    serde::{Deserialize, Serialize},","highlight_start":26,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/escrow_factory.rs","byte_start":28,"byte_end":34,"line_start":2,"line_end":2,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"    borsh::{self, BorshDeserialize, BorshSerialize},","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/escrow_factory.rs","byte_start":67,"byte_end":81,"line_start":2,"line_end":3,"column_start":52,"column_end":13,"is_primary":true,"text":[{"text":"    borsh::{self, BorshDeserialize, BorshSerialize},","highlight_start":52,"highlight_end":53},{"text":"    env, log, near, AccountId, Balance, Gas, Promise,","highlight_start":1,"highlight_end":13}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/escrow_factory.rs","byte_start":112,"byte_end":158,"line_start":3,"line_end":4,"column_start":44,"column_end":36,"is_primary":true,"text":[{"text":"    env, log, near, AccountId, Balance, Gas, Promise,","highlight_start":44,"highlight_end":54},{"text":"    serde::{Deserialize, Serialize},","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `Deserialize`, `Promise`, `Serialize`, `env`, `log`, and `self`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/escrow_factory.rs:2:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    borsh::{self, BorshDeserialize, BorshSerialize},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    env, log, near, AccountId, Balance, Gas, Promise,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    serde::{Deserialize, Serialize},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `DstImmutablesComplement`, `EscrowError`, `ExtraDataArgs`, `Immutables`, and `TimelockStage`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/escrow_factory.rs","byte_start":218,"byte_end":228,"line_start":8,"line_end":8,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    Immutables, DstImmutablesComplement, ExtraDataArgs, ValidationData, EscrowError, TimelockStage","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/escrow_factory.rs","byte_start":230,"byte_end":253,"line_start":8,"line_end":8,"column_start":17,"column_end":40,"is_primary":true,"text":[{"text":"    Immutables, DstImmutablesComplement, ExtraDataArgs, ValidationData, EscrowError, TimelockStage","highlight_start":17,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/escrow_factory.rs","byte_start":255,"byte_end":268,"line_start":8,"line_end":8,"column_start":42,"column_end":55,"is_primary":true,"text":[{"text":"    Immutables, DstImmutablesComplement, ExtraDataArgs, ValidationData, EscrowError, TimelockStage","highlight_start":42,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/escrow_factory.rs","byte_start":286,"byte_end":297,"line_start":8,"line_end":8,"column_start":73,"column_end":84,"is_primary":true,"text":[{"text":"    Immutables, DstImmutablesComplement, ExtraDataArgs, ValidationData, EscrowError, TimelockStage","highlight_start":73,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/escrow_factory.rs","byte_start":299,"byte_end":312,"line_start":8,"line_end":8,"column_start":86,"column_end":99,"is_primary":true,"text":[{"text":"    Immutables, DstImmutablesComplement, ExtraDataArgs, ValidationData, EscrowError, TimelockStage","highlight_start":86,"highlight_end":99}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/escrow_factory.rs","byte_start":218,"byte_end":270,"line_start":8,"line_end":8,"column_start":5,"column_end":57,"is_primary":true,"text":[{"text":"    Immutables, DstImmutablesComplement, ExtraDataArgs, ValidationData, EscrowError, TimelockStage","highlight_start":5,"highlight_end":57}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/escrow_factory.rs","byte_start":284,"byte_end":312,"line_start":8,"line_end":8,"column_start":71,"column_end":99,"is_primary":true,"text":[{"text":"    Immutables, DstImmutablesComplement, ExtraDataArgs, ValidationData, EscrowError, TimelockStage","highlight_start":71,"highlight_end":99}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/escrow_factory.rs","byte_start":212,"byte_end":218,"line_start":7,"line_end":8,"column_start":19,"column_end":5,"is_primary":true,"text":[{"text":"use crate::types::{","highlight_start":19,"highlight_end":20},{"text":"    Immutables, DstImmutablesComplement, ExtraDataArgs, ValidationData, EscrowError, TimelockStage","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/escrow_factory.rs","byte_start":312,"byte_end":314,"line_start":8,"line_end":9,"column_start":99,"column_end":2,"is_primary":true,"text":[{"text":"    Immutables, DstImmutablesComplement, ExtraDataArgs, ValidationData, EscrowError, TimelockStage","highlight_start":99,"highlight_end":99},{"text":"};","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `DstImmutablesComplement`, `EscrowError`, `ExtraDataArgs`, `Immutables`, and `TimelockStage`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/escrow_factory.rs:8:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Immutables, DstImmutablesComplement, ExtraDataArgs, ValidationData, EscrowError, TimelockStage\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `hash_immutables` and `validate_partial_fill`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/escrow_factory.rs","byte_start":335,"byte_end":350,"line_start":10,"line_end":10,"column_start":20,"column_end":35,"is_primary":true,"text":[{"text":"use crate::utils::{hash_immutables, validate_partial_fill};","highlight_start":20,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/escrow_factory.rs","byte_start":352,"byte_end":373,"line_start":10,"line_end":10,"column_start":37,"column_end":58,"is_primary":true,"text":[{"text":"use crate::utils::{hash_immutables, validate_partial_fill};","highlight_start":37,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/escrow_factory.rs","byte_start":316,"byte_end":376,"line_start":10,"line_end":11,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use crate::utils::{hash_immutables, validate_partial_fill};","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `hash_immutables` and `validate_partial_fill`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/escrow_factory.rs:10:20\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::utils::{hash_immutables, validate_partial_fill};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `AccountId`, `Deserialize`, `Serialize`, `env`, `log`, and `self`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/escrow_src.rs","byte_start":28,"byte_end":32,"line_start":2,"line_end":2,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"    borsh::{self, BorshDeserialize, BorshSerialize},","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/escrow_src.rs","byte_start":73,"byte_end":76,"line_start":3,"line_end":3,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    env, log, near, AccountId, Balance,","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/escrow_src.rs","byte_start":78,"byte_end":81,"line_start":3,"line_end":3,"column_start":10,"column_end":13,"is_primary":true,"text":[{"text":"    env, log, near, AccountId, Balance,","highlight_start":10,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/escrow_src.rs","byte_start":89,"byte_end":98,"line_start":3,"line_end":3,"column_start":21,"column_end":30,"is_primary":true,"text":[{"text":"    env, log, near, AccountId, Balance,","highlight_start":21,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/escrow_src.rs","byte_start":121,"byte_end":132,"line_start":4,"line_end":4,"column_start":13,"column_end":24,"is_primary":true,"text":[{"text":"    serde::{Deserialize, Serialize},","highlight_start":13,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/escrow_src.rs","byte_start":134,"byte_end":143,"line_start":4,"line_end":4,"column_start":26,"column_end":35,"is_primary":true,"text":[{"text":"    serde::{Deserialize, Serialize},","highlight_start":26,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/escrow_src.rs","byte_start":28,"byte_end":34,"line_start":2,"line_end":2,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"    borsh::{self, BorshDeserialize, BorshSerialize},","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/escrow_src.rs","byte_start":67,"byte_end":81,"line_start":2,"line_end":3,"column_start":52,"column_end":13,"is_primary":true,"text":[{"text":"    borsh::{self, BorshDeserialize, BorshSerialize},","highlight_start":52,"highlight_end":53},{"text":"    env, log, near, AccountId, Balance,","highlight_start":1,"highlight_end":13}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/escrow_src.rs","byte_start":87,"byte_end":98,"line_start":3,"line_end":3,"column_start":19,"column_end":30,"is_primary":true,"text":[{"text":"    env, log, near, AccountId, Balance,","highlight_start":19,"highlight_end":30}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/escrow_src.rs","byte_start":107,"byte_end":144,"line_start":3,"line_end":4,"column_start":39,"column_end":36,"is_primary":true,"text":[{"text":"    env, log, near, AccountId, Balance,","highlight_start":39,"highlight_end":40},{"text":"    serde::{Deserialize, Serialize},","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `AccountId`, `Deserialize`, `Serialize`, `env`, `log`, and `self`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/escrow_src.rs:2:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    borsh::{self, BorshDeserialize, BorshSerialize},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    env, log, near, AccountId, Balance,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    serde::{Deserialize, Serialize},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `EscrowError`, `Immutables`, and `TimelockStage`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/escrow_src.rs","byte_start":168,"byte_end":178,"line_start":6,"line_end":6,"column_start":20,"column_end":30,"is_primary":true,"text":[{"text":"use crate::types::{Immutables, EscrowError, TimelockStage};","highlight_start":20,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/escrow_src.rs","byte_start":180,"byte_end":191,"line_start":6,"line_end":6,"column_start":32,"column_end":43,"is_primary":true,"text":[{"text":"use crate::types::{Immutables, EscrowError, TimelockStage};","highlight_start":32,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/escrow_src.rs","byte_start":193,"byte_end":206,"line_start":6,"line_end":6,"column_start":45,"column_end":58,"is_primary":true,"text":[{"text":"use crate::types::{Immutables, EscrowError, TimelockStage};","highlight_start":45,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/escrow_src.rs","byte_start":149,"byte_end":209,"line_start":6,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use crate::types::{Immutables, EscrowError, TimelockStage};","highlight_start":1,"highlight_end":60},{"text":"use crate::utils::{validate_after, validate_before, validate_caller};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `EscrowError`, `Immutables`, and `TimelockStage`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/escrow_src.rs:6:20\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::types::{Immutables, EscrowError, TimelockStage};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `validate_after`, `validate_before`, and `validate_caller`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/escrow_src.rs","byte_start":228,"byte_end":242,"line_start":7,"line_end":7,"column_start":20,"column_end":34,"is_primary":true,"text":[{"text":"use crate::utils::{validate_after, validate_before, validate_caller};","highlight_start":20,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/escrow_src.rs","byte_start":244,"byte_end":259,"line_start":7,"line_end":7,"column_start":36,"column_end":51,"is_primary":true,"text":[{"text":"use crate::utils::{validate_after, validate_before, validate_caller};","highlight_start":36,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/escrow_src.rs","byte_start":261,"byte_end":276,"line_start":7,"line_end":7,"column_start":53,"column_end":68,"is_primary":true,"text":[{"text":"use crate::utils::{validate_after, validate_before, validate_caller};","highlight_start":53,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/escrow_src.rs","byte_start":209,"byte_end":279,"line_start":7,"line_end":8,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use crate::utils::{validate_after, validate_before, validate_caller};","highlight_start":1,"highlight_end":70},{"text":"use super::base_escrow::BaseEscrow;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `validate_after`, `validate_before`, and `validate_caller`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/escrow_src.rs:7:20\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::utils::{validate_after, validate_before, validate_caller};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `AccountId`, `Deserialize`, `Serialize`, `env`, `log`, and `self`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/escrow_dst.rs","byte_start":28,"byte_end":32,"line_start":2,"line_end":2,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"    borsh::{self, BorshDeserialize, BorshSerialize},","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/escrow_dst.rs","byte_start":73,"byte_end":76,"line_start":3,"line_end":3,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    env, log, near, AccountId, Balance,","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/escrow_dst.rs","byte_start":78,"byte_end":81,"line_start":3,"line_end":3,"column_start":10,"column_end":13,"is_primary":true,"text":[{"text":"    env, log, near, AccountId, Balance,","highlight_start":10,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/escrow_dst.rs","byte_start":89,"byte_end":98,"line_start":3,"line_end":3,"column_start":21,"column_end":30,"is_primary":true,"text":[{"text":"    env, log, near, AccountId, Balance,","highlight_start":21,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/escrow_dst.rs","byte_start":121,"byte_end":132,"line_start":4,"line_end":4,"column_start":13,"column_end":24,"is_primary":true,"text":[{"text":"    serde::{Deserialize, Serialize},","highlight_start":13,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/escrow_dst.rs","byte_start":134,"byte_end":143,"line_start":4,"line_end":4,"column_start":26,"column_end":35,"is_primary":true,"text":[{"text":"    serde::{Deserialize, Serialize},","highlight_start":26,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/escrow_dst.rs","byte_start":28,"byte_end":34,"line_start":2,"line_end":2,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"    borsh::{self, BorshDeserialize, BorshSerialize},","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/escrow_dst.rs","byte_start":67,"byte_end":81,"line_start":2,"line_end":3,"column_start":52,"column_end":13,"is_primary":true,"text":[{"text":"    borsh::{self, BorshDeserialize, BorshSerialize},","highlight_start":52,"highlight_end":53},{"text":"    env, log, near, AccountId, Balance,","highlight_start":1,"highlight_end":13}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/escrow_dst.rs","byte_start":87,"byte_end":98,"line_start":3,"line_end":3,"column_start":19,"column_end":30,"is_primary":true,"text":[{"text":"    env, log, near, AccountId, Balance,","highlight_start":19,"highlight_end":30}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/escrow_dst.rs","byte_start":107,"byte_end":144,"line_start":3,"line_end":4,"column_start":39,"column_end":36,"is_primary":true,"text":[{"text":"    env, log, near, AccountId, Balance,","highlight_start":39,"highlight_end":40},{"text":"    serde::{Deserialize, Serialize},","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `AccountId`, `Deserialize`, `Serialize`, `env`, `log`, and `self`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/escrow_dst.rs:2:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    borsh::{self, BorshDeserialize, BorshSerialize},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    env, log, near, AccountId, Balance,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    serde::{Deserialize, Serialize},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `EscrowError`, `Immutables`, and `TimelockStage`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/escrow_dst.rs","byte_start":168,"byte_end":178,"line_start":6,"line_end":6,"column_start":20,"column_end":30,"is_primary":true,"text":[{"text":"use crate::types::{Immutables, EscrowError, TimelockStage};","highlight_start":20,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/escrow_dst.rs","byte_start":180,"byte_end":191,"line_start":6,"line_end":6,"column_start":32,"column_end":43,"is_primary":true,"text":[{"text":"use crate::types::{Immutables, EscrowError, TimelockStage};","highlight_start":32,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/escrow_dst.rs","byte_start":193,"byte_end":206,"line_start":6,"line_end":6,"column_start":45,"column_end":58,"is_primary":true,"text":[{"text":"use crate::types::{Immutables, EscrowError, TimelockStage};","highlight_start":45,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/escrow_dst.rs","byte_start":149,"byte_end":209,"line_start":6,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use crate::types::{Immutables, EscrowError, TimelockStage};","highlight_start":1,"highlight_end":60},{"text":"use crate::utils::{validate_after, validate_before, validate_caller};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `EscrowError`, `Immutables`, and `TimelockStage`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/escrow_dst.rs:6:20\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::types::{Immutables, EscrowError, TimelockStage};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `validate_after`, `validate_before`, and `validate_caller`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/escrow_dst.rs","byte_start":228,"byte_end":242,"line_start":7,"line_end":7,"column_start":20,"column_end":34,"is_primary":true,"text":[{"text":"use crate::utils::{validate_after, validate_before, validate_caller};","highlight_start":20,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/escrow_dst.rs","byte_start":244,"byte_end":259,"line_start":7,"line_end":7,"column_start":36,"column_end":51,"is_primary":true,"text":[{"text":"use crate::utils::{validate_after, validate_before, validate_caller};","highlight_start":36,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/escrow_dst.rs","byte_start":261,"byte_end":276,"line_start":7,"line_end":7,"column_start":53,"column_end":68,"is_primary":true,"text":[{"text":"use crate::utils::{validate_after, validate_before, validate_caller};","highlight_start":53,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/escrow_dst.rs","byte_start":209,"byte_end":279,"line_start":7,"line_end":8,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use crate::utils::{validate_after, validate_before, validate_caller};","highlight_start":1,"highlight_end":70},{"text":"use super::base_escrow::BaseEscrow;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `validate_after`, `validate_before`, and `validate_caller`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/escrow_dst.rs:7:20\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::utils::{validate_after, validate_before, validate_caller};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `self`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":28,"byte_end":32,"line_start":2,"line_end":2,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"    borsh::{self, BorshDeserialize, BorshSerialize},","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/types.rs","byte_start":28,"byte_end":34,"line_start":2,"line_end":2,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"    borsh::{self, BorshDeserialize, BorshSerialize},","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `self`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:2:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    borsh::{self, BorshDeserialize, BorshSerialize},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `TimelockStage` and `ValidationData`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/utils.rs","byte_start":100,"byte_end":113,"line_start":5,"line_end":5,"column_start":43,"column_end":56,"is_primary":true,"text":[{"text":"use crate::types::{Immutables, Timelocks, TimelockStage, ValidationData, EscrowError};","highlight_start":43,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/utils.rs","byte_start":115,"byte_end":129,"line_start":5,"line_end":5,"column_start":58,"column_end":72,"is_primary":true,"text":[{"text":"use crate::types::{Immutables, Timelocks, TimelockStage, ValidationData, EscrowError};","highlight_start":58,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/utils.rs","byte_start":98,"byte_end":129,"line_start":5,"line_end":5,"column_start":41,"column_end":72,"is_primary":true,"text":[{"text":"use crate::types::{Immutables, Timelocks, TimelockStage, ValidationData, EscrowError};","highlight_start":41,"highlight_end":72}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `TimelockStage` and `ValidationData`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/utils.rs:5:43\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::types::{Immutables, Timelocks, TimelockStage, ValidationData, EscrowError};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `near_sdk::near`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":203,"byte_end":217,"line_start":11,"line_end":11,"column_start":5,"column_end":19,"is_primary":true,"text":[{"text":"use near_sdk::near;","highlight_start":5,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":199,"byte_end":219,"line_start":11,"line_end":12,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use near_sdk::near;","highlight_start":1,"highlight_end":20},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `near_sdk::near`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:11:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse near_sdk::near;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected function, tuple struct or tuple variant, found struct `Gas`","code":{"code":"E0423","explanation":"An identifier was used like a function name or a value was expected and the\nidentifier exists but it belongs to a different namespace.\n\nErroneous code example:\n\n```compile_fail,E0423\nstruct Foo { a: bool };\n\nlet f = Foo();\n// error: expected function, tuple struct or tuple variant, found `Foo`\n// `Foo` is a struct name, but this expression uses it like a function name\n```\n\nPlease verify you didn't misspell the name of what you actually wanted to use\nhere. Example:\n\n```\nfn Foo() -> u32 { 0 }\n\nlet f = Foo(); // ok!\n```\n\nIt is common to forget the trailing `!` on macro invocations, which would also\nyield this error:\n\n```compile_fail,E0423\nprintln(\"\");\n// error: expected function, tuple struct or tuple variant,\n// found macro `println`\n// did you mean `println!(...)`? (notice the trailing `!`)\n```\n\nAnother case where this error is emitted is when a value is expected, but\nsomething else is found:\n\n```compile_fail,E0423\npub mod a {\n    pub const I: i32 = 1;\n}\n\nfn h1() -> i32 {\n    a.I\n    //~^ ERROR expected value, found module `a`\n    // did you mean `a::I`?\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/johnwhitton/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/near-gas-0.3.1/src/lib.rs","byte_start":1274,"byte_end":1292,"line_start":42,"line_end":42,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"pub struct NearGas {","highlight_start":1,"highlight_end":19}],"label":"`Gas` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/base_escrow.rs","byte_start":401,"byte_end":424,"line_start":10,"line_end":10,"column_start":34,"column_end":57,"is_primary":true,"text":[{"text":"const GAS_FOR_FT_TRANSFER: Gas = Gas(10_000_000_000_000);","highlight_start":34,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"you might have meant to use an associated function to build this type","code":null,"level":"help","spans":[{"file_name":"src/base_escrow.rs","byte_start":404,"byte_end":424,"line_start":10,"line_end":10,"column_start":37,"column_end":57,"is_primary":true,"text":[{"text":"const GAS_FOR_FT_TRANSFER: Gas = Gas(10_000_000_000_000);","highlight_start":37,"highlight_end":57}],"label":null,"suggested_replacement":"::from_tgas(_)","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/base_escrow.rs","byte_start":404,"byte_end":424,"line_start":10,"line_end":10,"column_start":37,"column_end":57,"is_primary":true,"text":[{"text":"const GAS_FOR_FT_TRANSFER: Gas = Gas(10_000_000_000_000);","highlight_start":37,"highlight_end":57}],"label":null,"suggested_replacement":"::from_ggas(_)","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/base_escrow.rs","byte_start":404,"byte_end":424,"line_start":10,"line_end":10,"column_start":37,"column_end":57,"is_primary":true,"text":[{"text":"const GAS_FOR_FT_TRANSFER: Gas = Gas(10_000_000_000_000);","highlight_start":37,"highlight_end":57}],"label":null,"suggested_replacement":"::from_gas(_)","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0423]\u001b[0m\u001b[0m\u001b[1m: expected function, tuple struct or tuple variant, found struct `Gas`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/base_escrow.rs:10:34\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mconst GAS_FOR_FT_TRANSFER: Gas = Gas(10_000_000_000_000);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/johnwhitton/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/near-gas-0.3.1/src/lib.rs:42:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct NearGas {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Gas` defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you might have meant to use an associated function to build this type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0mconst GAS_FOR_FT_TRANSFER: Gas = Gas\u001b[0m\u001b[0m\u001b[38;5;9m(10_000_000_000_000)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0mconst GAS_FOR_FT_TRANSFER: Gas = Gas\u001b[0m\u001b[0m\u001b[38;5;10m::from_tgas(_)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0mconst GAS_FOR_FT_TRANSFER: Gas = Gas\u001b[0m\u001b[0m\u001b[38;5;9m(10_000_000_000_000)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0mconst GAS_FOR_FT_TRANSFER: Gas = Gas\u001b[0m\u001b[0m\u001b[38;5;10m::from_ggas(_)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0mconst GAS_FOR_FT_TRANSFER: Gas = Gas\u001b[0m\u001b[0m\u001b[38;5;9m(10_000_000_000_000)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0mconst GAS_FOR_FT_TRANSFER: Gas = Gas\u001b[0m\u001b[0m\u001b[38;5;10m::from_gas(_)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `BorshSerialize` for type `BaseEscrow`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/base_escrow.rs","byte_start":489,"byte_end":512,"line_start":13,"line_end":13,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"#[near(contract_state)]","highlight_start":1,"highlight_end":24}],"label":"first implementation here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/base_escrow.rs","byte_start":489,"byte_end":512,"line_start":13,"line_end":13,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"#[near(contract_state)]","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(::near_sdk::borsh::BorshSerialize)]","def_site_span":{"file_name":"/Users/johnwhitton/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/borsh-derive-1.5.7/src/lib.rs","byte_start":1047,"byte_end":1104,"line_start":37,"line_end":37,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"pub fn borsh_serialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/base_escrow.rs","byte_start":522,"byte_end":536,"line_start":14,"line_end":14,"column_start":10,"column_end":24,"is_primary":true,"text":[{"text":"#[derive(BorshSerialize, BorshDeserialize)]","highlight_start":10,"highlight_end":24}],"label":"conflicting implementation for `BaseEscrow`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/base_escrow.rs","byte_start":522,"byte_end":536,"line_start":14,"line_end":14,"column_start":10,"column_end":24,"is_primary":false,"text":[{"text":"#[derive(BorshSerialize, BorshDeserialize)]","highlight_start":10,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(BorshSerialize)]","def_site_span":{"file_name":"/Users/johnwhitton/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/borsh-derive-1.5.7/src/lib.rs","byte_start":1047,"byte_end":1104,"line_start":37,"line_end":37,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"pub fn borsh_serialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `BorshSerialize` for type `BaseEscrow`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/base_escrow.rs:14:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[near(contract_state)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfirst implementation here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(BorshSerialize, BorshDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconflicting implementation for `BaseEscrow`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `BorshSerialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `BorshSerialize` for type `EscrowFactory`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/escrow_factory.rs","byte_start":528,"byte_end":551,"line_start":16,"line_end":16,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"#[near(contract_state)]","highlight_start":1,"highlight_end":24}],"label":"first implementation here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/escrow_factory.rs","byte_start":528,"byte_end":551,"line_start":16,"line_end":16,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"#[near(contract_state)]","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(::near_sdk::borsh::BorshSerialize)]","def_site_span":{"file_name":"/Users/johnwhitton/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/borsh-derive-1.5.7/src/lib.rs","byte_start":1047,"byte_end":1104,"line_start":37,"line_end":37,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"pub fn borsh_serialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/escrow_factory.rs","byte_start":561,"byte_end":575,"line_start":17,"line_end":17,"column_start":10,"column_end":24,"is_primary":true,"text":[{"text":"#[derive(BorshSerialize, BorshDeserialize)]","highlight_start":10,"highlight_end":24}],"label":"conflicting implementation for `EscrowFactory`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/escrow_factory.rs","byte_start":561,"byte_end":575,"line_start":17,"line_end":17,"column_start":10,"column_end":24,"is_primary":false,"text":[{"text":"#[derive(BorshSerialize, BorshDeserialize)]","highlight_start":10,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(BorshSerialize)]","def_site_span":{"file_name":"/Users/johnwhitton/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/borsh-derive-1.5.7/src/lib.rs","byte_start":1047,"byte_end":1104,"line_start":37,"line_end":37,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"pub fn borsh_serialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `BorshSerialize` for type `EscrowFactory`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/escrow_factory.rs:17:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[near(contract_state)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfirst implementation here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(BorshSerialize, BorshDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconflicting implementation for `EscrowFactory`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `BorshSerialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `BorshSerialize` for type `EscrowSrc`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/escrow_src.rs","byte_start":371,"byte_end":394,"line_start":11,"line_end":11,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"#[near(contract_state)]","highlight_start":1,"highlight_end":24}],"label":"first implementation here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/escrow_src.rs","byte_start":371,"byte_end":394,"line_start":11,"line_end":11,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"#[near(contract_state)]","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(::near_sdk::borsh::BorshSerialize)]","def_site_span":{"file_name":"/Users/johnwhitton/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/borsh-derive-1.5.7/src/lib.rs","byte_start":1047,"byte_end":1104,"line_start":37,"line_end":37,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"pub fn borsh_serialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/escrow_src.rs","byte_start":404,"byte_end":418,"line_start":12,"line_end":12,"column_start":10,"column_end":24,"is_primary":true,"text":[{"text":"#[derive(BorshSerialize, BorshDeserialize)]","highlight_start":10,"highlight_end":24}],"label":"conflicting implementation for `EscrowSrc`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/escrow_src.rs","byte_start":404,"byte_end":418,"line_start":12,"line_end":12,"column_start":10,"column_end":24,"is_primary":false,"text":[{"text":"#[derive(BorshSerialize, BorshDeserialize)]","highlight_start":10,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(BorshSerialize)]","def_site_span":{"file_name":"/Users/johnwhitton/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/borsh-derive-1.5.7/src/lib.rs","byte_start":1047,"byte_end":1104,"line_start":37,"line_end":37,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"pub fn borsh_serialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `BorshSerialize` for type `EscrowSrc`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/escrow_src.rs:12:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[near(contract_state)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfirst implementation here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(BorshSerialize, BorshDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconflicting implementation for `EscrowSrc`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `BorshSerialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `BorshSerialize` for type `EscrowDst`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/escrow_dst.rs","byte_start":376,"byte_end":399,"line_start":11,"line_end":11,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"#[near(contract_state)]","highlight_start":1,"highlight_end":24}],"label":"first implementation here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/escrow_dst.rs","byte_start":376,"byte_end":399,"line_start":11,"line_end":11,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"#[near(contract_state)]","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(::near_sdk::borsh::BorshSerialize)]","def_site_span":{"file_name":"/Users/johnwhitton/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/borsh-derive-1.5.7/src/lib.rs","byte_start":1047,"byte_end":1104,"line_start":37,"line_end":37,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"pub fn borsh_serialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/escrow_dst.rs","byte_start":409,"byte_end":423,"line_start":12,"line_end":12,"column_start":10,"column_end":24,"is_primary":true,"text":[{"text":"#[derive(BorshSerialize, BorshDeserialize)]","highlight_start":10,"highlight_end":24}],"label":"conflicting implementation for `EscrowDst`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/escrow_dst.rs","byte_start":409,"byte_end":423,"line_start":12,"line_end":12,"column_start":10,"column_end":24,"is_primary":false,"text":[{"text":"#[derive(BorshSerialize, BorshDeserialize)]","highlight_start":10,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(BorshSerialize)]","def_site_span":{"file_name":"/Users/johnwhitton/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/borsh-derive-1.5.7/src/lib.rs","byte_start":1047,"byte_end":1104,"line_start":37,"line_end":37,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"pub fn borsh_serialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `BorshSerialize` for type `EscrowDst`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/escrow_dst.rs:12:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[near(contract_state)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfirst implementation here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(BorshSerialize, BorshDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconflicting implementation for `EscrowDst`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `BorshSerialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `BorshDeserialize` for type `BaseEscrow`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/base_escrow.rs","byte_start":489,"byte_end":512,"line_start":13,"line_end":13,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"#[near(contract_state)]","highlight_start":1,"highlight_end":24}],"label":"first implementation here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/base_escrow.rs","byte_start":489,"byte_end":512,"line_start":13,"line_end":13,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"#[near(contract_state)]","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(::near_sdk::borsh::BorshDeserialize)]","def_site_span":{"file_name":"/Users/johnwhitton/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/borsh-derive-1.5.7/src/lib.rs","byte_start":2040,"byte_end":2099,"line_start":65,"line_end":65,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn borsh_deserialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/base_escrow.rs","byte_start":538,"byte_end":554,"line_start":14,"line_end":14,"column_start":26,"column_end":42,"is_primary":true,"text":[{"text":"#[derive(BorshSerialize, BorshDeserialize)]","highlight_start":26,"highlight_end":42}],"label":"conflicting implementation for `BaseEscrow`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/base_escrow.rs","byte_start":538,"byte_end":554,"line_start":14,"line_end":14,"column_start":26,"column_end":42,"is_primary":false,"text":[{"text":"#[derive(BorshSerialize, BorshDeserialize)]","highlight_start":26,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(BorshDeserialize)]","def_site_span":{"file_name":"/Users/johnwhitton/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/borsh-derive-1.5.7/src/lib.rs","byte_start":2040,"byte_end":2099,"line_start":65,"line_end":65,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn borsh_deserialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `BorshDeserialize` for type `BaseEscrow`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/base_escrow.rs:14:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[near(contract_state)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfirst implementation here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(BorshSerialize, BorshDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconflicting implementation for `BaseEscrow`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `BorshDeserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `BorshDeserialize` for type `EscrowFactory`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/escrow_factory.rs","byte_start":528,"byte_end":551,"line_start":16,"line_end":16,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"#[near(contract_state)]","highlight_start":1,"highlight_end":24}],"label":"first implementation here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/escrow_factory.rs","byte_start":528,"byte_end":551,"line_start":16,"line_end":16,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"#[near(contract_state)]","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(::near_sdk::borsh::BorshDeserialize)]","def_site_span":{"file_name":"/Users/johnwhitton/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/borsh-derive-1.5.7/src/lib.rs","byte_start":2040,"byte_end":2099,"line_start":65,"line_end":65,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn borsh_deserialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/escrow_factory.rs","byte_start":577,"byte_end":593,"line_start":17,"line_end":17,"column_start":26,"column_end":42,"is_primary":true,"text":[{"text":"#[derive(BorshSerialize, BorshDeserialize)]","highlight_start":26,"highlight_end":42}],"label":"conflicting implementation for `EscrowFactory`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/escrow_factory.rs","byte_start":577,"byte_end":593,"line_start":17,"line_end":17,"column_start":26,"column_end":42,"is_primary":false,"text":[{"text":"#[derive(BorshSerialize, BorshDeserialize)]","highlight_start":26,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(BorshDeserialize)]","def_site_span":{"file_name":"/Users/johnwhitton/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/borsh-derive-1.5.7/src/lib.rs","byte_start":2040,"byte_end":2099,"line_start":65,"line_end":65,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn borsh_deserialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `BorshDeserialize` for type `EscrowFactory`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/escrow_factory.rs:17:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[near(contract_state)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfirst implementation here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(BorshSerialize, BorshDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconflicting implementation for `EscrowFactory`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `BorshDeserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `BorshDeserialize` for type `EscrowSrc`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/escrow_src.rs","byte_start":371,"byte_end":394,"line_start":11,"line_end":11,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"#[near(contract_state)]","highlight_start":1,"highlight_end":24}],"label":"first implementation here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/escrow_src.rs","byte_start":371,"byte_end":394,"line_start":11,"line_end":11,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"#[near(contract_state)]","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(::near_sdk::borsh::BorshDeserialize)]","def_site_span":{"file_name":"/Users/johnwhitton/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/borsh-derive-1.5.7/src/lib.rs","byte_start":2040,"byte_end":2099,"line_start":65,"line_end":65,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn borsh_deserialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/escrow_src.rs","byte_start":420,"byte_end":436,"line_start":12,"line_end":12,"column_start":26,"column_end":42,"is_primary":true,"text":[{"text":"#[derive(BorshSerialize, BorshDeserialize)]","highlight_start":26,"highlight_end":42}],"label":"conflicting implementation for `EscrowSrc`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/escrow_src.rs","byte_start":420,"byte_end":436,"line_start":12,"line_end":12,"column_start":26,"column_end":42,"is_primary":false,"text":[{"text":"#[derive(BorshSerialize, BorshDeserialize)]","highlight_start":26,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(BorshDeserialize)]","def_site_span":{"file_name":"/Users/johnwhitton/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/borsh-derive-1.5.7/src/lib.rs","byte_start":2040,"byte_end":2099,"line_start":65,"line_end":65,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn borsh_deserialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `BorshDeserialize` for type `EscrowSrc`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/escrow_src.rs:12:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[near(contract_state)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfirst implementation here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(BorshSerialize, BorshDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconflicting implementation for `EscrowSrc`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `BorshDeserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"conflicting implementations of trait `BorshDeserialize` for type `EscrowDst`","code":{"code":"E0119","explanation":"There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"},"level":"error","spans":[{"file_name":"src/escrow_dst.rs","byte_start":376,"byte_end":399,"line_start":11,"line_end":11,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"#[near(contract_state)]","highlight_start":1,"highlight_end":24}],"label":"first implementation here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/escrow_dst.rs","byte_start":376,"byte_end":399,"line_start":11,"line_end":11,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"#[near(contract_state)]","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(::near_sdk::borsh::BorshDeserialize)]","def_site_span":{"file_name":"/Users/johnwhitton/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/borsh-derive-1.5.7/src/lib.rs","byte_start":2040,"byte_end":2099,"line_start":65,"line_end":65,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn borsh_deserialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/escrow_dst.rs","byte_start":425,"byte_end":441,"line_start":12,"line_end":12,"column_start":26,"column_end":42,"is_primary":true,"text":[{"text":"#[derive(BorshSerialize, BorshDeserialize)]","highlight_start":26,"highlight_end":42}],"label":"conflicting implementation for `EscrowDst`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/escrow_dst.rs","byte_start":425,"byte_end":441,"line_start":12,"line_end":12,"column_start":26,"column_end":42,"is_primary":false,"text":[{"text":"#[derive(BorshSerialize, BorshDeserialize)]","highlight_start":26,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(BorshDeserialize)]","def_site_span":{"file_name":"/Users/johnwhitton/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/borsh-derive-1.5.7/src/lib.rs","byte_start":2040,"byte_end":2099,"line_start":65,"line_end":65,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn borsh_deserialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0119]\u001b[0m\u001b[0m\u001b[1m: conflicting implementations of trait `BorshDeserialize` for type `EscrowDst`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/escrow_dst.rs:12:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[near(contract_state)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfirst implementation here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(BorshSerialize, BorshDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconflicting implementation for `EscrowDst`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `BorshDeserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected function, tuple struct or tuple variant, found struct `Gas`","code":{"code":"E0423","explanation":"An identifier was used like a function name or a value was expected and the\nidentifier exists but it belongs to a different namespace.\n\nErroneous code example:\n\n```compile_fail,E0423\nstruct Foo { a: bool };\n\nlet f = Foo();\n// error: expected function, tuple struct or tuple variant, found `Foo`\n// `Foo` is a struct name, but this expression uses it like a function name\n```\n\nPlease verify you didn't misspell the name of what you actually wanted to use\nhere. Example:\n\n```\nfn Foo() -> u32 { 0 }\n\nlet f = Foo(); // ok!\n```\n\nIt is common to forget the trailing `!` on macro invocations, which would also\nyield this error:\n\n```compile_fail,E0423\nprintln(\"\");\n// error: expected function, tuple struct or tuple variant,\n// found macro `println`\n// did you mean `println!(...)`? (notice the trailing `!`)\n```\n\nAnother case where this error is emitted is when a value is expected, but\nsomething else is found:\n\n```compile_fail,E0423\npub mod a {\n    pub const I: i32 = 1;\n}\n\nfn h1() -> i32 {\n    a.I\n    //~^ ERROR expected value, found module `a`\n    // did you mean `a::I`?\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/johnwhitton/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/near-gas-0.3.1/src/lib.rs","byte_start":1274,"byte_end":1292,"line_start":42,"line_end":42,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"pub struct NearGas {","highlight_start":1,"highlight_end":19}],"label":"`Gas` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/escrow_factory.rs","byte_start":446,"byte_end":469,"line_start":13,"line_end":13,"column_start":38,"column_end":61,"is_primary":true,"text":[{"text":"const GAS_FOR_ESCROW_CREATION: Gas = Gas(50_000_000_000_000);","highlight_start":38,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"you might have meant to use an associated function to build this type","code":null,"level":"help","spans":[{"file_name":"src/escrow_factory.rs","byte_start":449,"byte_end":469,"line_start":13,"line_end":13,"column_start":41,"column_end":61,"is_primary":true,"text":[{"text":"const GAS_FOR_ESCROW_CREATION: Gas = Gas(50_000_000_000_000);","highlight_start":41,"highlight_end":61}],"label":null,"suggested_replacement":"::from_tgas(_)","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/escrow_factory.rs","byte_start":449,"byte_end":469,"line_start":13,"line_end":13,"column_start":41,"column_end":61,"is_primary":true,"text":[{"text":"const GAS_FOR_ESCROW_CREATION: Gas = Gas(50_000_000_000_000);","highlight_start":41,"highlight_end":61}],"label":null,"suggested_replacement":"::from_ggas(_)","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/escrow_factory.rs","byte_start":449,"byte_end":469,"line_start":13,"line_end":13,"column_start":41,"column_end":61,"is_primary":true,"text":[{"text":"const GAS_FOR_ESCROW_CREATION: Gas = Gas(50_000_000_000_000);","highlight_start":41,"highlight_end":61}],"label":null,"suggested_replacement":"::from_gas(_)","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0423]\u001b[0m\u001b[0m\u001b[1m: expected function, tuple struct or tuple variant, found struct `Gas`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/escrow_factory.rs:13:38\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mconst GAS_FOR_ESCROW_CREATION: Gas = Gas(50_000_000_000_000);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/johnwhitton/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/near-gas-0.3.1/src/lib.rs:42:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct NearGas {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Gas` defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you might have meant to use an associated function to build this type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0mconst GAS_FOR_ESCROW_CREATION: Gas = Gas\u001b[0m\u001b[0m\u001b[38;5;9m(50_000_000_000_000)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0mconst GAS_FOR_ESCROW_CREATION: Gas = Gas\u001b[0m\u001b[0m\u001b[38;5;10m::from_tgas(_)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0mconst GAS_FOR_ESCROW_CREATION: Gas = Gas\u001b[0m\u001b[0m\u001b[38;5;9m(50_000_000_000_000)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0mconst GAS_FOR_ESCROW_CREATION: Gas = Gas\u001b[0m\u001b[0m\u001b[38;5;10m::from_ggas(_)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0mconst GAS_FOR_ESCROW_CREATION: Gas = Gas\u001b[0m\u001b[0m\u001b[38;5;9m(50_000_000_000_000)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0mconst GAS_FOR_ESCROW_CREATION: Gas = Gas\u001b[0m\u001b[0m\u001b[38;5;10m::from_gas(_)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no function or associated item named `new_unchecked` found for struct `near_sdk::AccountId` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/base_escrow.rs","byte_start":810,"byte_end":823,"line_start":25,"line_end":25,"column_start":38,"column_end":51,"is_primary":true,"text":[{"text":"            access_token: AccountId::new_unchecked(\"\".to_string()),","highlight_start":38,"highlight_end":51}],"label":"function or associated item not found in `AccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you're trying to build a new `near_sdk::AccountId`, consider using `near_sdk::AccountId::new_unvalidated` which returns `near_sdk::AccountId`","code":null,"level":"note","spans":[{"file_name":"/Users/johnwhitton/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/near-account-id-1.1.3/src/account_id.rs","byte_start":2096,"byte_end":2146,"line_start":57,"line_end":57,"column_start":5,"column_end":55,"is_primary":true,"text":[{"text":"    pub fn new_unvalidated(account_id: String) -> Self {","highlight_start":5,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no function or associated item named `new_unchecked` found for struct `near_sdk::AccountId` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/base_escrow.rs:25:38\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            access_token: AccountId::new_unchecked(\"\".to_string()),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item not found in `AccountId`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: if you're trying to build a new `near_sdk::AccountId`, consider using `near_sdk::AccountId::new_unvalidated` which returns `near_sdk::AccountId`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/johnwhitton/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/near-account-id-1.1.3/src/account_id.rs:57:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new_unvalidated(account_id: String) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no function or associated item named `new_unchecked` found for struct `near_sdk::AccountId` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/base_escrow.rs","byte_start":873,"byte_end":886,"line_start":26,"line_end":26,"column_start":33,"column_end":46,"is_primary":true,"text":[{"text":"            factory: AccountId::new_unchecked(\"\".to_string()),","highlight_start":33,"highlight_end":46}],"label":"function or associated item not found in `AccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you're trying to build a new `near_sdk::AccountId`, consider using `near_sdk::AccountId::new_unvalidated` which returns `near_sdk::AccountId`","code":null,"level":"note","spans":[{"file_name":"/Users/johnwhitton/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/near-account-id-1.1.3/src/account_id.rs","byte_start":2096,"byte_end":2146,"line_start":57,"line_end":57,"column_start":5,"column_end":55,"is_primary":true,"text":[{"text":"    pub fn new_unvalidated(account_id: String) -> Self {","highlight_start":5,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no function or associated item named `new_unchecked` found for struct `near_sdk::AccountId` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/base_escrow.rs:26:33\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            factory: AccountId::new_unchecked(\"\".to_string()),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item not found in `AccountId`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: if you're trying to build a new `near_sdk::AccountId`, consider using `near_sdk::AccountId::new_unvalidated` which returns `near_sdk::AccountId`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/johnwhitton/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/near-account-id-1.1.3/src/account_id.rs:57:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new_unvalidated(account_id: String) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no function or associated item named `new_unchecked` found for struct `near_sdk::AccountId` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/escrow_factory.rs","byte_start":993,"byte_end":1006,"line_start":29,"line_end":29,"column_start":51,"column_end":64,"is_primary":true,"text":[{"text":"            escrow_src_implementation: AccountId::new_unchecked(\"\".to_string()),","highlight_start":51,"highlight_end":64}],"label":"function or associated item not found in `AccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you're trying to build a new `near_sdk::AccountId`, consider using `near_sdk::AccountId::new_unvalidated` which returns `near_sdk::AccountId`","code":null,"level":"note","spans":[{"file_name":"/Users/johnwhitton/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/near-account-id-1.1.3/src/account_id.rs","byte_start":2096,"byte_end":2146,"line_start":57,"line_end":57,"column_start":5,"column_end":55,"is_primary":true,"text":[{"text":"    pub fn new_unvalidated(account_id: String) -> Self {","highlight_start":5,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no function or associated item named `new_unchecked` found for struct `near_sdk::AccountId` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/escrow_factory.rs:29:51\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            escrow_src_implementation: AccountId::new_unchecked(\"\".to_string()),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item not found in `AccountId`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: if you're trying to build a new `near_sdk::AccountId`, consider using `near_sdk::AccountId::new_unvalidated` which returns `near_sdk::AccountId`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/johnwhitton/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/near-account-id-1.1.3/src/account_id.rs:57:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new_unvalidated(account_id: String) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no function or associated item named `new_unchecked` found for struct `near_sdk::AccountId` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/escrow_factory.rs","byte_start":1074,"byte_end":1087,"line_start":30,"line_end":30,"column_start":51,"column_end":64,"is_primary":true,"text":[{"text":"            escrow_dst_implementation: AccountId::new_unchecked(\"\".to_string()),","highlight_start":51,"highlight_end":64}],"label":"function or associated item not found in `AccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you're trying to build a new `near_sdk::AccountId`, consider using `near_sdk::AccountId::new_unvalidated` which returns `near_sdk::AccountId`","code":null,"level":"note","spans":[{"file_name":"/Users/johnwhitton/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/near-account-id-1.1.3/src/account_id.rs","byte_start":2096,"byte_end":2146,"line_start":57,"line_end":57,"column_start":5,"column_end":55,"is_primary":true,"text":[{"text":"    pub fn new_unvalidated(account_id: String) -> Self {","highlight_start":5,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no function or associated item named `new_unchecked` found for struct `near_sdk::AccountId` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/escrow_factory.rs:30:51\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            escrow_dst_implementation: AccountId::new_unchecked(\"\".to_string()),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item not found in `AccountId`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: if you're trying to build a new `near_sdk::AccountId`, consider using `near_sdk::AccountId::new_unvalidated` which returns `near_sdk::AccountId`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/johnwhitton/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/near-account-id-1.1.3/src/account_id.rs:57:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new_unvalidated(account_id: String) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 36 previous errors; 15 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 36 previous errors; 15 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0119, E0423, E0432, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0119, E0423, E0432, E0599.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0119`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0119`.\u001b[0m\n"}
